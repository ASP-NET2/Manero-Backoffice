@page "/updateproduct/{productId}"
@rendermode InteractiveServer

<p>@product.Author</p>
<p>@product.Title</p>

<div class="update-product-container">
@if (isLoading)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="@product" OnValidSubmit="UpdateProductAsync" FormName="updateproduct" class="updateproduct-form">
        <DataAnnotationsValidator />
        <ValidationSummary />
        
        <h3>UpdateProduct</h3>

        <div class="inputs-container">
            <div class="container-div-top">
                <div class="form-div-row">
                    <div class="image-box">
                        <img src="@product.ImageUrl" alt="">
                    </div>
                    <div class="input-group">
                        <InputFile class="file-input" OnChange="HandleFileUpload" />
                    </div>
                </div>
                <div class="form-div-row">
                    <div class="input-group">
                        <div class="input-group">
                            <InputText class="form-input" @bind-Value="product.ShortDescription" />
                            <label for="shortDescription">Short Description</label>
                            @* <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" /> *@
                        </div>
                        <div class="input-group">
                            <InputTextArea class="form-input long-description" @bind-Value="product.LongDescription" rows="10" cols="30"/>
                            <label for="longDescription">Long Description</label>
                            @* <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" /> *@
                        </div>
                    </div>
                </div>
            </div>
            <div class="container-div-button">
                <div class="form-div-column">
                    <div class="input-group">
                        <InputText class="form-input" @bind-Value="product.Author"/>
                        <label for="author">Author</label>
                        @* <ValidationMessage For="() => Input.Author" class="text-danger" /> *@
                    </div>
                    <div class="input-group">
                        <InputText class="form-input" @bind-Value="product.Title"/>
                        <label for="title">Title</label>
                        @* <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" /> *@
                    </div>
                    <div class="input-group">
                        <InputText class="form-input" @bind-Value="product.Price"/>
                        <label for="price">Price</label>
                        @* <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" /> *@
                    </div>
                    <div class="input-group">
                        <InputText class="form-input" @bind-Value="product.DiscountPrice" />
                        <label for="discountPrice">Discount Price</label>
                        @* <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" /> *@
                    </div>
                    <div class="input-group">
                        <InputText class="form-input" @bind-Value="product.Language" />
                        <label for="language">Language</label>
                        @* <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" /> *@
                    </div>
                    <div class="input-group">
                        <InputText class="form-input" @bind-Value="product.Pages" />
                        <label for="pages">Pages</label>
                        @* <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" /> *@
                    </div>
                    <div class="input-group">
                        <InputDate class="form-input" @bind-Value="product.PublishDate"  />
                        <label for="publishDate">Publish Date</label>
                        @* <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" /> *@
                    </div>
                    <div class="input-group">
                        <InputText class="form-input" @bind-Value="product.Publisher" />
                        <label for="publisher">Publisher</label>
                        @* <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" /> *@
                    </div>
                    <div class="input-group">
                        <InputText class="form-input" @bind-Value="product.ISBN" />
                        <label for="isbn">ISBN Number</label>
                        @* <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" /> *@
                    </div>
                </div>
                <div class="form-div-column">
                    @* <div class="input-group">
                        <InputSelect class="select-input" @bind-Value="product.CategoryName" name="category" id="category-filter">
                            <option value="">Category</option>
                            @foreach (var category in categories)
                            {
                                <option value="@category.CategoryName">@category.CategoryName</option>
                            }
                        </InputSelect>
                        <label for="category">Category</label>
                    </div>
                    <div class="input-group">
                        <InputSelect class="select-input" @bind-Value="product.SubCategoryName" name="subcategory" id="subcategory-filter">
                            <option value="">Subcategory</option>
                            @foreach (var subCategory in subCategories)
                            {
                                <option value="@subCategory.SubCategoryName">@subCategory.SubCategoryName</option>
                            }
                        </InputSelect>
                        <label for="subCategory">Subcategory</label>
                    </div>
                    <div class="input-group">
                        <InputSelect class="select-input" @bind-Value="product.FormatName" name="format" id="format-filter">
                            <option value="">Choose format</option>
                            @foreach (var format in formats)
                            {
                                <option value="@format.FormatName">@format.FormatName</option>
                            }
                        </InputSelect>
                        <label for="format">Format</label>
                    </div> *@
                    <div class="input-checkbox-group">
                        <div class="checkbox-div">
                            <div class="checkbox-group">
                                <InputCheckbox class="checkbox-input" @bind-Value="product.OnSale" name="onsale" id="onsale">
                                    <option value="">On Sale</option>
                                </InputCheckbox>
                                <label for="onsale">On sale</label>
                                @* <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" /> *@
                            </div>
                            <div class="checkbox-group">
                                <InputCheckbox class="checkbox-input" @bind-Value="product.BestSeller" name="bestseller" id="bestseller">
                                    <option value="">Best Seller</option>
                                </InputCheckbox>
                                <label for="bestseller">Bestseller</label>
                                @* <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" /> *@
                            </div>
                        </div>
                        <div class="checkbox-div">
                            <div class="checkbox-group">
                                <InputCheckbox class="checkbox-input" @bind-Value="product.IsFavorite" name="isfavorite" id="isfavorite">
                                    <option value="">Is Favorite</option>
                                </InputCheckbox>
                                <label for="isfavorite">Is Favorite</label>
                                @* <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" /> *@
                            </div>
                            <div class="checkbox-group">
                                <InputCheckbox class="checkbox-input" @bind-Value="product.FeaturedProduct" name="featuredproduct" id="featuredproduct">
                                    <option value="">FeaturedProduct</option>
                                </InputCheckbox>
                                <label for="featuredproduct">Featured Product</label>
                                @* <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" /> *@
                            </div>
                        </div>
                    </div>
                        <Dropdown Title="Kategori" Options="@categoryNames" CurrentValue="@product.CategoryName" OnValueChanged="HandleSelectedCategory"/>
                        <Dropdown Title="Underkategori" Options="@subCategoryNames" CurrentValue="@product.SubCategoryName" OnValueChanged="HandleSelectedSubCategory"/>
                        <Dropdown Title="Format" Options="@formatNames" CurrentValue="@product.FormatName" OnValueChanged="HandleSelectedFormat"/>
                </div>
            </div>
        </div>

        <!-- Lägg till fler inputfält här -->

        <button type="submit" class="btn btn-primary">Update</button>
    </EditForm>
}
    <div class="form-results">
        <p>@product.Author</p>
        <p>@product.Title</p>
        <p>@product.Price</p>
        <p>@product.ShortDescription</p>
        <p>@product.Language</p>
        <p>@product.Pages</p>
        <p>@product.PublishDate</p>
        <p>@product.ISBN</p>
        <p>@product.OnSale</p>
        <p>@product.BestSeller</p>
        <p>@product.IsFavorite</p>
        <p>@product.FeaturedProduct</p>
        <p>@product.CategoryName</p>
        <p>@product.SubCategoryName</p>
        <p>@product.FormatName</p>
    </div>
</div>

@code {
    [Parameter]
    public string ProductId {get; set;}
    private bool isLoading = true;

    private UpdateProductModel product = new();
    List<CategoryModel> categories = new();
    List<string> categoryNames = new();
    List<SubCategoryModel> subCategories = new();
    List<string> subCategoryNames = new();
    List<FormatModel> formats = new();
    List<string> formatNames = new();
    private IBrowserFile uploadedFile;

    protected override async Task OnInitializedAsync()
    {
        categories = await categoryService.GetCategories();
        subCategories = await subCategoryService.GetSubCategories();
        formats = await formatService.GetFormats();

        foreach (var category in categories)
        {
            categoryNames.Add(category.CategoryName);
        }
        foreach (var subCategory in subCategories)
        {
            subCategoryNames.Add(subCategory.SubCategoryName);
        }
        foreach (var format in formats)
        {
            formatNames.Add(format.FormatName);
        }

        if (!string.IsNullOrEmpty(ProductId))
        {
            product = await productService.GetProductById(ProductId);
            if (product != null)
                isLoading = false;
        }
    }

    public async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
        
        if (uploadedFile != null)
        {
            var imageUrl = await imageService.UploadImageAsync(uploadedFile);

            product.ImageUrl = imageUrl;
        }
    }

    private async Task UpdateProductAsync(EditContext editContext)
    {
        var result = await productService.UpdateProductAsync(product);
        if (result)
            NavigationManager.NavigateTo("/product");
    }

    private void HandleSelectedCategory(string newValue)
    {
        product.CategoryName = newValue;
    }
    private void HandleSelectedSubCategory(string newValue)
    {
        product.SubCategoryName = newValue;
    }
    private void HandleSelectedFormat(string newValue)
    {
        product.FormatName = newValue;
    }
}
