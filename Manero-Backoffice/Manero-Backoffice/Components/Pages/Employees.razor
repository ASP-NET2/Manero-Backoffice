@page "/employees"

@using Manero_Backoffice.Generics
@using Manero_Backoffice.Components.Components
@inject UserService UserService
@inject EmployeeTypeService EmployeeTypesService

@attribute [Authorize(Roles = "Admin, Super Admin")]

@rendermode InteractiveServer
<div class="employees">
    <div class="container">

        @if (isLoadingFilterSection && isLoadingTable)
        {
            <div class="page-spinner spinner-xl"></div>
        }
        else
        {
            <div class="filter-section card">
                @if (isLoadingFilterSection)
                {
                    <div class="section-spinner spinner-m"></div>
                }
                else
                {
                    <Dropdown Title="Titles" Options="@employeeTypeNames" OnValueChanged="HandleFilterByTitle" />
                    <NavLink href="/Account/Register"><i class="fa-sharp fa-regular fa-circle-plus"></i> Add New</NavLink>
                }
            </div>

            <div class="table-section card">
                @if (isLoadingTable)
                {
                    <div class="section-spinner spinner-m"></div>
                }
                else
                {
                    <Table Model="tableModel" DeleteAction="DeleteEmployee" EditAction="EditEmployee" />
                }
            </div>
        }

     
        
    </div>

    <ConfirmDialog IsVisible="@showConfirmDialog" IsVisibleChanged="HandleChangeVisibility" OnConfirm="ConfirmDelete" Message="@confirmMessage" ErrorMessage="@errorMessage" />

</div>

@code {
    private TableModel<EmployeeModel> tableModel = new();

    private bool isLoadingTable = true;
    private bool isLoadingFilterSection = true;
    private bool showConfirmDialog = false;

    private EmployeeModel employeeToDelete = null!;
    private string confirmMessage = null!;
    private List<string>? employeeTypeNames;
    private string errorMessage = null!;

    private async Task DeleteEmployee(EmployeeModel employee)
    {
        employeeToDelete = employee;
        confirmMessage = $"Are you sure you want to delete {employee.FirstName} {employee.LastName}?";
        showConfirmDialog = true;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var employeeTypes = await EmployeeTypesService.GetEmployeeTypesAsync();
            if(employeeTypes != null)
            {
                employeeTypeNames = employeeTypes.Select(et => et.Type).ToList();
                isLoadingFilterSection = false;
                StateHasChanged();
            }

            var employees = await EmployeeService.GetEmployeesAsync();
            if (employees != null)
            {
                tableModel.Items = employees;
                tableModel.Columns = new Dictionary<string, string>
                {
                    { "FirstName", "Firstname" },
                    { "LastName", "Lastname" },
                    { "EmployeeType", "Title" },
                    { "PhoneNumber", "Phonenumber" }
                };
                isLoadingTable = false;
                StateHasChanged();
            }
        }
    }

    private async Task HandleFilterByTitle(string employeeTypeName)
    {
        Console.WriteLine(employeeTypeName);
    }

    private async Task EditEmployee(EmployeeModel employee)
    {
        // Implement your edit logic here
        // For now, we'll just print the employee to the console
        Console.WriteLine($"Editing employee: {employee.FirstName} {employee.LastName}");
    }

    private async Task HandleChangeVisibility(bool visibility)
    {
        errorMessage = null!;
        showConfirmDialog = visibility;
    }



    private async Task ConfirmDelete()
    {
        var deleteEmployeeResult = await EmployeeService.DeleteEmployeeAsync(employeeToDelete.Id);
        if (!deleteEmployeeResult.Succeeded)
        {
            errorMessage = deleteEmployeeResult.ErrorMessage!;
            return;
        }

        var deleteUserResult = await UserService.DeleteUserAsync(employeeToDelete.Id);
        if (!deleteUserResult.Succeeded)
        {
            errorMessage = deleteUserResult.ErrorMessage!;
            return;
        }

        tableModel.Items!.Remove(employeeToDelete);

           
    }
}
