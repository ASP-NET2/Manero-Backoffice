@page "/product"
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Products</PageTitle>

<div class="filter-container">
    <div class="drop-down-filters">
        @* <select name="categories" id="category-filter" @onchange="OnCategoryChanged">
                <option value="">Category</option>
            @foreach (var category in categories)
            {
                <option value="@category.CategoryName">@category.CategoryName</option>
            }
        </select>
        
        <select name="subcategories" id="subcategory-filter" @onchange="OnSubCategoryChanged">
                <option value="">Subcategory</option>
            @foreach (var subCategory in subCategories)
            {
                <option value="@subCategory.SubCategoryName">@subCategory.SubCategoryName</option>
            }
        </select>

        <select name="formats" id="format-filter" @onchange="OnFormatChanged">
                <option value="">Format</option>
            @foreach (var format in formats)
            {
                <option value="@format.FormatName">@format.FormatName</option>
            }
        </select> *@
        <Dropdown Title="Kategori" Options="@categoryNames" OnValueChanged="HandleSelectedCategory" />
        <Dropdown Title="Underkategori" Options="@subCategoryNames" OnValueChanged="HandleSelectedSubCategory" />
        <Dropdown Title="Format" Options="@formatNames" OnValueChanged="HandleSelectedFormat" />
        <div class="input-group">
            <div class="input-checkbox-group">
                <input @onchange="OnSaleChanged" type="checkbox" id="onsale" name="onsale">
                <label for="onsale">On Sale</label>
            </div>
            <div class="input-checkbox-group">
                <input @onchange="OnFavoriteChanged" type="checkbox" id="isfavorite" name="isfavorite">
                <label for="isfavorite">Is Favorite</label>
            </div>
        </div>
        <div class="input-group">
            <div class="input-checkbox-group">
                <input @onchange="OnBestsellerChanged" type="checkbox" id="isbestseller" name="isbestseller">
                <label for="isbestseller">Is Bestseller</label>
            </div>
            <div class="input-checkbox-group">
                <input @onchange="OnFeaturedProductChanged" type="checkbox" id="featuredproduct" name="featuredproduct">
                <label for="featuredproduct">Featured Product</label>
            </div>
        </div>
        @* <Dropdown Title="Kategori" Options="@categoryNames" /> *@
    </div>
    <NavLink class="btn-theme" href="addproduct"><span><i class="fa-sharp fa-regular fa-circle-plus"></i> Add New</span></NavLink>
</div>
<div class="content-container">
    <div class="title-row row">
        <p></p>
        <p>Title</p>
        <p>Category</p>
        <p>SubCatgory</p>
        <p>Format</p>
        <p>Price</p>
    </div>
    @if (products == null)
    {
        <p>Loading...</p>
    }
    else if (!products.Any())
    {
        <p>No products available.</p>
    }
    else
    {
        @foreach (var product in products)
        {
            <div class="product-row row">
                @if (@product.ImageUrl != null)
                {
                <img class="product-image" src="@product.ImageUrl" alt="@product.Title image">
                }
                else 
                {
                <img class="product-image" src="https://productsblob.blob.core.windows.net/images/JEMA%20GER%201639-10.jpg" alt="book default image">
                }
                <p>@product.Title</p>
                <p>@product.CategoryName</p>
                <p>@product.SubCategoryName</p>
                <p>@product.FormatName</p>
                <p>@product.Price SEK</p>
                <button class="product-btn info" @onclick="() => NavigateToUpdateProduct(product.Id)" ><i class="fa-regular fa-pen"></i></button>
                <button id="@product.Id" @onclick="@(async () => await DeleteProduct(product.Id))" class="product-btn danger"><i class="fa-regular fa-trash"></i></button>
            </div>
        }
    }
</div>

@code {

    List<ProductModel> products = new();
    List<CategoryModel> categories = new();
    List<SubCategoryModel> subCategories = new();
    List<FormatModel> formats = new();
    List<string> categoryNames = new();
    List<string> subCategoryNames = new();
    List<string> formatNames = new();

    private string selectedCategory = "";
    private string selectedSubCategory = "";
    private string selectedFormat = "";
    private bool onSale = false;
    private bool isFavorite = false;
    private bool isBestseller = false;
    private bool featuredProduct = false;

    protected override async Task OnInitializedAsync()
    {
        categories = await categoryService.GetCategories();
        subCategories = await subCategoryService.GetSubCategories();
        formats = await formatService.GetFormats();
    
        foreach (var category in categories)
        {
            categoryNames.Add(category.CategoryName);
        }
        foreach (var subCategory in subCategories)
        {
            subCategoryNames.Add(subCategory.SubCategoryName);
        }
        foreach (var format in formats)
        {
            formatNames.Add(format.FormatName);
        }

        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        @* products = await productService.GetProducts(); *@
        products = await productService.GetProductsByFilter(selectedCategory, selectedSubCategory, selectedFormat, onSale, isFavorite, isBestseller, featuredProduct);
        StateHasChanged();
    }

    private async Task OnFilterChanged()
    {
        await LoadProducts();
    }

    private async Task OnCategoryChanged(ChangeEventArgs e)
    {
        selectedCategory = e.Value.ToString();
        await OnFilterChanged();
    }
    private async Task OnSubCategoryChanged(ChangeEventArgs e)
    {
        selectedSubCategory = e.Value.ToString();
        await OnFilterChanged();
    }
    private async Task OnFormatChanged(ChangeEventArgs e)
    {
        selectedFormat = e.Value.ToString();
        await OnFilterChanged();
    }
    private async Task OnSaleChanged(ChangeEventArgs e)
    {
        onSale = (bool)e.Value;
        await OnFilterChanged();
    }
    private async Task OnFavoriteChanged(ChangeEventArgs e)
    {
        isFavorite = (bool)e.Value;
        await OnFilterChanged();
    }
    private async Task OnBestsellerChanged(ChangeEventArgs e)
    {
        isBestseller = (bool)e.Value;
        await OnFilterChanged();
    }
    private async Task OnFeaturedProductChanged(ChangeEventArgs e)
    {
        featuredProduct = (bool)e.Value;
        await OnFilterChanged();
    }

    private async Task DeleteProduct(string id)
    {
        await productService.DeleteProduct(id);
        await LoadProducts();
    }

    private void NavigateToUpdateProduct(string productId)
    {
        NavigationManager.NavigateTo($"/updateproduct/{productId}");
    }

    private async Task HandleSelectedCategory(string Category)
    {
        selectedCategory = Category;
        await OnFilterChanged();
    }
    private async Task HandleSelectedSubCategory(string SubCategory)
    {
        selectedSubCategory = SubCategory;
        await OnFilterChanged();
    }
    private async Task HandleSelectedFormat(string Format)
    {
        selectedFormat = Format;
        await OnFilterChanged();
    }



}
