@page "/product"
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Products</PageTitle>

<div class="filter-container">
    <div class="drop-down-filters">
        <select name="categories" id="category-filter">
                <option value="All">Category</option>
            @foreach (var category in categories)
            {
                <option value="@category.CategoryName">@category.CategoryName</option>
            }
        </select>
        
        <select name="subcategories" id="subcategory-filter">
                <option value="All">Subcategory</option>
            @foreach (var subCategory in subCategories)
            {
                <option value="@subCategory.SubCategoryName">@subCategory.SubCategoryName</option>
            }
        </select>

        <select name="formats" id="format-filter">
                <option value="All">Format</option>
            @foreach (var format in formats)
            {
                <option value="@format.FormatName">@format.FormatName</option>
            }
        </select>
        <Dropdown Title="Kategori" Options="@categoryNames" />
    </div>
    <NavLink class="btn-theme" href="addproduct"><span><i class="fa-sharp fa-regular fa-circle-plus"></i> Add New</span></NavLink>
</div>
<div class="content-container">
    <div class="title-row row">
        <p></p>
        <p>Title</p>
        <p>Category</p>
        <p>SubCatgory</p>
        <p>Format</p>
        <p>Price</p>
    </div>
    @if (products == null)
    {
        <p>Loading...</p>
    }
    else if (!products.Any())
    {
        <p>No products available.</p>
    }
    else
    {
        @foreach (var product in products)
        {
            <div class="product-row row">
                @if (@product.ImageUrl != null)
                {
                <img class="product-image" src="@product.ImageUrl" alt="@product.Title image">
                }
                else 
                {
                <img class="product-image" src="https://productsblob.blob.core.windows.net/images/JEMA%20GER%201639-10.jpg" alt="book default image">
                }
                <p>@product.Title</p>
                <p>@product.CategoryName</p>
                <p>@product.SubCategoryName</p>
                <p>@product.FormatName</p>
                <p>@product.Price SEK</p>
                <button class="product-btn info"><i class="fa-regular fa-pen"></i></button>
                <button id="@product.Id" @onclick="@(async () => await DeleteProduct(product.Id))" class="product-btn danger"><i class="fa-regular fa-trash"></i></button>
            </div>
        }
    }
</div>

@code {

    List<ProductModel> products = new();
    List<CategoryModel> categories = new();
    List<SubCategoryModel> subCategories = new();
    List<string> categoryNames = new();
    List<FormatModel> formats = new();

    protected override async Task OnInitializedAsync()
    {
        categories = await categoryService.GetCategories();
        subCategories = await subCategoryService.GetSubCategories();
        formats = await formatService.GetFormats();
    
        foreach (var category in categories)
        {
            categoryNames.Add(category.CategoryName);
        }

        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        products = await productService.GetProducts();
        StateHasChanged();
    }

    private async Task DeleteProduct(string id)
    {
        await productService.DeleteProduct(id);
        await LoadProducts();
    }



}
