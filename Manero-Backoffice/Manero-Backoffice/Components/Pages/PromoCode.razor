@page "/promocode"

<PageTitle>PromoCodes</PageTitle>

@rendermode InteractiveServer
<div class="filter-container promocode">

    @* <NavLink class="btn-theme" href="addpromocode"><span><i class="fa-sharp fa-regular fa-circle-plus"></i> Add New</span></NavLink>
    <button class="btn-theme" onclick=""><span><i class="fa-sharp fa-regular fa-circle-plus"></i> Add</span></button> *@

    <button class="btn-theme" @onclick="ShowAddPopup"><span><i class="fa-sharp fa-regular fa-circle-plus"></i> Add Code</span></button>
</div>

<div class="table-section card">
        @if (isLoadingTable)
        {
            <div class="section-spinner spinner-m"></div>
        }
        else
        {
            <Table Model="promocodeModel" DeleteAction="DeleteCode" EditAction="EditCode" ModifyPermissionRoles="Admin, Super Admin" />
        }
</div>

<ConfirmDialog IsVisible="@showConfirmDialog" IsVisibleChanged="HandleChangeVisibility" OnConfirm="ConfirmDelete" Message="@confirmMessage" ErrorMessage="@errorMessage" />

<AddPromoCodePopup IsVisible="@showAddPromoCode" IsVisibleChanged="HandleChangeVisibility" OnPromoCodeAdded="OnPromoCodeChange" />

<UpdatePromoCodePopup IsVisible="@showUpdatePromoCode" IsVisibleChanged="HandleChangeVisibility" OnPromoCodeUpdated="OnPromoCodeChange" InputModel="@promoCodeToUpdate"/>

@code {
    List<PromocodeModel> promocodes = new();
    private TableModel<PromocodeModel> promocodeModel = new();
    private bool isLoadingTable = true;
    private bool isLoadingFilterSection = true;

    private PromocodeModel promocodeToDelete = null!;
    private PromocodeModel promoCodeToUpdate = new();
    private string confirmMessage = null!;
    private string? errorMessage;
    private bool showConfirmDialog = false;
    private bool showAddPromoCode = false;
    private bool showUpdatePromoCode = false;

    private async Task DeleteCode(PromocodeModel promocode)
    {
        promocodeToDelete = promocode;
        confirmMessage = $"Are you sure you want to delete {promocode.CodeName}?";
        showConfirmDialog = true;
        StateHasChanged();
    }

    private void ShowAddPopup()
    {
        showAddPromoCode = true;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadPromoCodes();
    }

    private async Task LoadPromoCodes()
    {
        var promocodes = await promocodeService.GetAllPromocodesAsync();
            if (promocodes != null)
            {
                promocodeModel.Items = promocodes;
                promocodeModel.Columns = new Dictionary<string, string>
                {
                    { "CodeName", "Name" },
                    { "Discount", "Discount" },
                    { "ExpiresDate", "Expires" },
                    { "IsActive", "Active?" },
                    { "IsPrivate", "Private?" },
                    { "UserId", "User" }
                };
                isLoadingTable = false;
                StateHasChanged();
            }
    }

    private async Task EditCode(PromocodeModel promocode)
    {
        promoCodeToUpdate = promocode;
        showUpdatePromoCode = true;
        StateHasChanged();
    }

    private async Task HandleChangeVisibility(bool resetMessage)
    {
        if (resetMessage)
            errorMessage = null!;

        if(errorMessage == null)
        {
            showConfirmDialog = false;
            showAddPromoCode = false;
            showUpdatePromoCode = false;
        }
    }

    private async Task ConfirmDelete()
    {
        try
        {
            var result = await promocodeService.DeletePromocodeAsync(promocodeToDelete.Id);
            if (result)
                promocodeModel.Items.Remove(promocodeToDelete);
            else
                errorMessage = "An error occurred while deleting the promocode.";

            showConfirmDialog = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            StateHasChanged();
        }
    }

    private async Task OnPromoCodeChange()
    {
        await LoadPromoCodes();
    }
}

