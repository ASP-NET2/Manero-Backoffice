@page "/Account/Login"

<PageTitle>Log in</PageTitle>
  
<section class="login">
    <div class="container">
     
        
            <div class="title-section">
                <h1>Welcome Back!</h1>
                <p>Manero Admin</p>
            </div>

            <div class="form-section">
                <StatusMessage Message="@errorMessage" />
                <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" role="alert" />
                    <div class="input-group">
                        <label for="email">Email</label>
                    <InputText @bind-Value="Input.Email" class="text-input" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                        <ValidationMessage For="() => Input.Email" class="text-danger" />
                    </div>
                    <div class="input-group">
                        <label for="password">Password</label>
                    <InputText type="password" @bind-Value="Input.Password" class="text-input" autocomplete="current-password" aria-required="true" placeholder="enter your password" />
                        <ValidationMessage For="() => Input.Password" class="text-danger" />
                    </div>
                    <div class="checkbox">
                        <label>
                            <InputCheckbox @bind-Value="Input.RememberMe" class="remember-me" />
                            Remember me
                        </label>
                    </div>
               
                    <div>
                        <button type="submit" class="w-100 btn-theme">Log in</button>
                    </div>
                    <div>
                        <p>
                            <a href="Account/ForgotPassword">Forgot your password?</a>
                        </p>
                        <p>
                            <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                        </p>
                        <p>
                            <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                        </p>
                    </div>
                </EditForm>
            </div>
    </div>
</section>


@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private LoginForm Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
       
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }
}
