@page "/Account/Register"
@using Microsoft.EntityFrameworkCore


@attribute [Authorize(Roles = "Super Admin")]

@rendermode InteractiveServer

<PageTitle>Register</PageTitle>

<section class="register">
    <div class="container">

        <div class="title-section">
            <h1>Register Account</h1>
            <p>Create a new Admin account.</p>
        </div>

        <div class="form-section">
            <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                <DataAnnotationsValidator />
                    <div class="group-input">
                    <div class="input-group">
                        <InputText @bind-Value="Input.FirstName" aria-required="true" placeholder="First name" />
                        <label>First name</label>
                        <ValidationMessage For="() => Input.FirstName" class="text-danger" />
                    </div>
                    <div class="input-group">
                        <InputText @bind-Value="Input.LastName" aria-required="true" placeholder="Last name" />
                        <label>Last name</label>
                        <ValidationMessage For="() => Input.LastName" class="text-danger" />
                    </div>
                </div>
           
                <div class="input-group">
                    <InputText @bind-Value="Input.Email" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="email">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>

                <div class="group-input">
                    <div class="input-group">
                        <InputText type="password" @bind-Value="Input.Password" autocomplete="new-password" aria-required="true" placeholder="enter your password" />
                        <label for="password">Password</label>
                        <ValidationMessage For="() => Input.Password" class="text-danger" />
                    </div>
                    <div class="input-group">
                        <InputText type="password" @bind-Value="Input.ConfirmPassword" autocomplete="new-password" aria-required="true" placeholder="confirm password" />
                        <label for="confirm-password">Confirm Password</label>
                        <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                    </div>
                </div>
                
                
                <Dropdown Title="Select a role" Options="roles" OnValueChanged="HandleSelectedRole" />
                <ValidationMessage For="() => Input.UserRole" class="text-danger" />

                <div class="btn-submit">
                    <button type="submit" class="btn-theme">Register</button>
                </div>
            </EditForm>
        </div>
    </div>
</section>


@code {


    [SupplyParameterFromForm]
    private RegistrationForm Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message { get; set; } = "";

    private List<string>? roles { get; set; }

    protected override async Task OnInitializedAsync()
    {
        roles = await RoleService.GetRoleNamesAsync();
    }

 
    private void HandleSelectedRole(string selectedRole)
    {
        Input.UserRole = selectedRole;
    }

    public async Task RegisterUser(EditContext editContext)
    {
        var createdResult = await UserService.CreateAsync(Input);
        if (!createdResult.Succeeded)
        {
            Message = createdResult.ErrorMessage;
            return;
        }

        var user = await UserService.FindByEmailAsync(Input.Email);
        if (user == null)
        {
            Message = "Something went wrong";
            return;
        }

        var roleResult = await UserService.AddToRoleAsync(user, Input.UserRole);

        if (roleResult.Succeeded)
        {
            await EmailService.SendMessageAsync(EmailFactory.CreateEmailRequest(Input.Email, Input.Password, Input.FirstName, Input.UserRole));
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else
            Message = roleResult.ErrorMessage;

    }
}
