
<div class="dropdown" @onblur="CloseDropdown" tabindex="0">
    <div @onclick="ToggleDropdown" class='@(isOpen ? "focus" : "")' style="background-color: @Color;">@(CurrentValue ?? Title)<i class="fa-solid fa-caret-down"></i> <span style="background-color: @Color;">@(CurrentValue == null ? Title : $"You selected {CurrentValue}")</span> </div>

    <ul class="dropdown-menu" style="display:@(isOpen ? "block" : "none"); background-color: @Color;">
        @if (Options == null || !Options.Any())
        {
            <li>No options available</li>
        }
        else
        {
            <li @onclick="() => SelectOption(null!)">@Title</li>
            @foreach (var option in Options)
            {
                <li @onclick="() => SelectOption(option)">@option</li>
            }
        }
    </ul>
</div>

@code {
    [Parameter] public IEnumerable<string>? Options { get; set; }
    [Parameter] public string? CurrentValue { get; set; }
    [Parameter] public EventCallback<string> OnValueChanged { get; set; }
    [Parameter] public string Title { get; set; } = null!;
    [Parameter] public string Color { get; set; } = "white"; // Default to white



    private bool isOpen;

    private void ToggleDropdown()
    {
        isOpen = !isOpen;
    }

    private void CloseDropdown()
    {
        isOpen = false;
    }

    private async Task SelectOption(string option)
    {
        CurrentValue = option;
        isOpen = false;

        await OnValueChanged.InvokeAsync(option);
    }
}

